.. _configuración-colección:

Definición de una nueva colección
=================================

Una vez que se ha copiado el fichero del *driver* a la carpeta correspondiente 
(por defecto en ``lib``) y se han llevado a cabo todas aquellas acciones adicionales que puedan estar
indicadas en el apartado de instalación correspondiente a la guía del *driver* que maneje la nueva
colección a definir, habilitar dicha colección consiste en los siguientes pasos:

**Añadir la colección al fichero icms-providers.properties**

  Cada línea de este fichero define una colección de la siguiente manera::

    nombre_colección = clase Java que implementa el driver

  Se puede observar a continuación un fichero de ejemplo en donde se pueden observar dos colecciones
  servidas a través de un *driver* de *Drupal* y una manejada por el *driver* creado para el `Boletín
  Oficial de la Junta de Andalucía`_.

  .. _Boletín Oficial de la Junta de Andalucía: http://www.juntadeandalucia.es/boja

  .. code-block:: cfg

    organismos="es.juntadeandalucia.icms.drupal.provider.ICMSCollectionProviderDrupalImpl"
    publicaciones="es.juntadeandalucia.icms.drupal.provider.ICMSCollectionProviderDrupalImpl"
    boja="es.juntadeandalucia.icms.boja.provider.ICMSCollectionProviderBojaImpl"

**Configurar la nueva colección**

  El otro paso a seguir es definir la configuración de la nueva colección. Para ello, en el código
  fuente de cada *driver* se incluye un fichero *properties* de ejemplo en el que aparecen las
  opciones de configuración que admite el *driver*. Para que *iCMS* haga la asociación entre la
  colección y su fichero de configuración, éste último debe nombrarse icms-\ *nombre_colección*\
  .properties

  Se puede ver a continuación el fichero de configuración de ejemplo del driver *Drupal*:

  .. literalinclude:: /code/icms-drupal.properties
     :language: java

Los ficheros de configuración de las colecciones se pueden dividir en tres apartados
independientes. Existen unas propiedades generales y comunes a todos los drivers, unas propiedades
exclusivas del driver y, por último, una definición de los metadatos de la colección.

Propiedades generales
---------------------

Las propiedades generales definen el título, autor, permiso de escritura de la
colección, los posibles formatos de presentación de los recursos y, además, las
capacidades de búsqueda que admite. 

.. code-block:: cfg

  title = "Publicaciones"
  author = "Viavansi"
  modifiable = true
  mimetypes = ["atom", "text"]

  capabilities {
	'search' {
		fields = true
		wildcard = true
		fuzzy = true
		proximity = true
		range = true
		boosting = true
		or = true
		and = true
		required = true
		excluded = true
		grouping = true
    	}
	'operations' {
		query = true
		edit = true
		delete = true
		subscribe = true
	}
  }

La lista completa de formatos soportados es la siguiente:

- Atom (atom)
- HTML (html)
- RDF+XML (rdf)
- Texto (text)

Se indicarán las capacidades de búsqueda y de operación soportadas con ``<nombre_capacidad> = true``.
Si se omite o se le da el valor ``false`` a una determinada capacidad, se entenderá que
no es soportada por la colección.

Propiedades del driver
----------------------

Existirán en la configuración también propiedades relativas exclusivas al *driver* que maneja la
colección, y que en la mayor parte de las ocasiones son necesarias para un funcionamiento
correcto. En el caso del *driver Drupal* se definen dos *url* que permiten listar los contenidos de
la colección y añadir nuevos elementos.

.. code-block:: cfg

   urls {
     list_collection = "http://example.com/icms/publicaciones"
     add_content = "http://example.com/icmsbridge/node/add"
   }

Metadatos de la colección
-------------------------

El apartado de la configuración dedicado a los metadatos es el más complejo y el que define
realmente cómo se comportará la colección, ya que en él se indican los elementos que se podrán encontrar en
la representación de la colección en formato *Atom*.

Toda la configuración referente a los metadatos se engloba dentro del contenedor ``metadata``. Éste
puede contener una descripción de los metadatos o a su vez otro contenedor ``metadata``,
posibilitando así una estructura en forma de árbol.

La definición más simple que se puede hacer consiste en el nombre del metadato y las cinco
propiedades básicas: ``required``, ``queryable``, ``resolvable``, ``type`` y ``date_pattern``.

``required``
  Si su valor es ``true``, cada elemento de la colección debe contener, al menos, este metadato.

``queryable``
  Si su valor es ``true``, los elementos de la colección se pueden filtrar en función del valor de este metadato.

``resolvable``
  Si su valor es ``true``, en el caso de que el valor del metadato sea una dirección *url* el
  servicio *iCMS* se encargará de obtener el recurso asociado a ella e incluirlo en el *feed* de la
  colección.

``type``
    Indica el tipo del metadato, por ejemplo fecha.

``date_pattern``
    Indica el patrón de fecha con el que recibimos las fechas, por ejemplo: YYYY-MM-DD.

Por defecto, si el contenido de un metadato contiene código HTML, será escapado.
Para modificar este comportamiento existe una cuarta propiedad, ``escape``.
Si su valor es ``false`` encerrará el contenido entre etiquetas CDATA, y evitará que se escapen las etiquetas HTML.

Cada *driver* puede definir además nuevas opciones de configuración en la definición de
metadatos. Por ejemplo, el driver de *Drupal* añade los campos ``field`` y ``searchField``, que
indican respectivamente el nombre del metadato en el mismo *Drupal* y cómo hay que nombrarlo en una búsqueda.

Se incluye un ejemplo a continuación:

.. code-block:: cfg

  metadata {
    'id' {
        required = true
        resolvable = false
        queryable = true
    }
    'dc:title' {
        required = true
        resolvable = false
        queryable = true
    }
    'drupal:title' {
        required = true
        resolvable = false
        queryable = true
        escape = false
    }
    'drupal:changed' {
        required = true
        resolvable = false
        queryable = true
    }
    'icms:fecha_pub' {
        field = 'cck:field_fecha_pub'
        searchField = 'field_fecha_value'
	type = 'date'
	date_pattern = 'YYYY-MM-DD'
        required = false
        resolvable = false
        queryable = true

        metadata {
            'icms:value' {
                field = 'cck:value'
                searchField = 'field_fecha_pub_value'
                required = false
                resolvable = false
                queryable = false
            }
	}
    }

Configuración de scripts asociados a la colección
=================================================

Los scripts se configuran en el fichero ``icms-scripts.properties``, que tiene una sintaxis jerarquizada compatible con el
intérprete de configuración *ConfigSlurper* que se utiliza en *iCMS*.

Los scripts asociados al inicio se configuran dentro del contenedor ``init``, mientras que los que
están asociados a eventos se encuentran dentro del contenedor ``event``.

.. code-block:: cfg

  init {
    my_init_script {
      path = "/home/user/icms/data/scripts/my_init_script.groovy"
      parameters {
        collections = "loremipsums"
	solrUrl = "http://localhost:8984/solr"
	icmsUrl = "http://localhost:9991/icms"
	commitSize = "100"
	idSchema = "id"
      }
    }
  }

Para definir un *script* a ejecutar al inicio, se crea un nuevo contenedor que identifique al script y
que cuente con, al menos, la propiedad ``path`` (que indica el fichero a ejecutar) y el contenedor
``parameters``, en el que se definen propiedades que se pasan al *script* como argumentos (los
argumentos que se necesitan y lo que se hace con ellos dependen del *script* en sí).

.. code-block:: cfg

  event {
    my_event_script {
      path = "/home/user/icms/data/scripts/SolrEventScript.groovy"
      urlSubscription = "http://localhost:9991/icms"
      collections = [ "lorem", "ipsums" ]
      conditions = "dc:author=CICE;dc:subject=innovación"
      parameters {
        idSchema = "id"
	solrUrl = "http://localhost:8984/solr"
      }
    }
  }

Además de la ruta del fichero, son parámetros obligatorios en la definición de un *script* de
eventos las colecciones sobre las que tendrá efecto y la dirección *url* (``urlSubscription``) bajo la que se
puede acceder al servidor *iCMS* que gestiona la colecciones definidas.

En el parámetro ``collections`` se indicarán las colecciones a las que nos queremos suscribir separadas por punto y coma.

Las condiciones (``conditions``) sobre las cuales nos queremos suscribir a las colecciones indicadas se pondrán en
forma de lista.

Además de esta configuración, podemos declarar, al igual que se hace en el caso de los *scripts* de
inicio, una serie de parámetros que serán pasados al script cuando éste sea llamado.


Implementación de los scripts
-----------------------------

La lógica de las acciones irá escrita en *Java* y deberá implementar la interfaz correspondiente
dependiendo del tipo de script.

A continuación se incluyen las interfaces a implementar.

GroovyScript
~~~~~~~~~~~~

.. literalinclude:: /code/GroovyScript.java
   :language: java
   :linenos:

InitScript
~~~~~~~~~~
.. literalinclude:: /code/InitScript.java
   :language: java
   :linenos:

EventScript
~~~~~~~~~~~
.. literalinclude:: /code/EventScript.java
   :language: java
   :linenos:

Pasos a seguir después de configurar la colección
=================================================

Una vez que se ha creado el fichero de configuración de la colección (y no existiendo problemas de
visibilidad entre las aplicaciones, evidentemente), el servicio *iCMS* añadirá la colección la
siguiente vez que se :ref:`arranque <arranque>`.
